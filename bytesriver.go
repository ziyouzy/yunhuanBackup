//20200919尝试正式重构，整体流程大致如下：
/*-------------*/
//进行初始化操作:
//1.环境变量（不需要依赖注入）
//2.mysql与redis的单例模式
//3.也可能会初始化websocket服务
//4.实例化源头管道

//4.
//实例化tcp长连接管理对象（流入端）
//实例化udp连接管理对象（流入端）
//上面二合一

//5.
//实例化usb摄像头管理对象（流入端）

//6.
//实例化snmp

/*------------*/
//7.
//4作为数据生产者，从4所在管道取出数据，使用必要的协议和相关方法进行数据的解析（消费数据）
//并将解析后的输入传入新的管道(一个下游管道，储存的很可能是yunhuanfactory.physicalnode这一接口类型)

//8.再次对数据进行消费，可能存在的消费方式有如下几种
//a.序列化后存入redis（不需要新的下游管道）

//b.判断报警，并将报警信息传入mysql(或许需要新的下游管道)
//c.判断报警，将报警信息通过serial短信机发送给对应手机号(或许需要新的下游管道)
//d.b和c属于统一报警模块，并且其拥有自己的日志系统，录入b,c的执行结果(成功or失败)(或许需要新的下游管道)

//e.通过websocket给前端发送其所需的数据(或许需要下游管道)

//8整体是一个扇出，目前看来整体系统不需要“扇入”，数据源头的操作目前看来只需要“汇入”
package bytesriver


// var YunHuanRawChan_AgreeMentDateIn20200917 =make(chan []byte/*,2000*/)

// func main(){

// }

